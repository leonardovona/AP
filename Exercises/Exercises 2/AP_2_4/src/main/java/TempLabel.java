
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeSupport;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/BeanForm.java to edit this template
 */

/**
 *
 * @author leonardo
 */
public class TempLabel extends JLabel implements VetoableChangeListener{

    private VetoableChangeSupport vetos;
    /**
     * Creates new form TempLabel
     */
    public TempLabel() {
        initComponents();      
        vetos = new VetoableChangeSupport(this);
        vetos.addVetoableChangeListener(this);
    }

    @Override
    public void setText(String newText) {
        if(vetos == null){
            super.setText(newText);
        }else{
            try {
                String oldText = this.getText();
                vetos.fireVetoableChange("Text", oldText, newText);
                double temperature = Double.parseDouble(newText);
                temperature = (temperature * (double)9/5) + 32;
                super.setText(String.format("%.2f", temperature));
            } catch (PropertyVetoException ex) {
                super.setText("NaN");
            }
        }
    }
    
    @Override
    public void addVetoableChangeListener(VetoableChangeListener l){
        vetos.addVetoableChangeListener(l);
    }
    
    @Override
    public void removeVetoableChangeListener(VetoableChangeListener l){
        vetos.removeVetoableChangeListener(l);
    }
    
    @Override
    public void vetoableChange(PropertyChangeEvent evt) throws PropertyVetoException {
        double newValue;
        try{
            newValue = Double.parseDouble((String) evt.getNewValue());
        }catch(NumberFormatException e){
            throw new PropertyVetoException("Unable to parse the new value as a double", evt);
        }
        if(newValue < -273.15f)
            throw new PropertyVetoException("Value can't be less than absoulute zero", evt);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
